program = ws declaration*:d ws body:b ws {Program(:d, :b)};
declaration = "var" ws var:v ws ":" ws type:t ws ";" ws {Declaration(:v, :t)};

type = integer | array;
integer = ws "int" ws {TypeInt()};
array = ws "[" ws type:t "]" ws {TypeArray(:t)};

body = assign | test | seqExec | choiceExec| print | while | loop;
loop = "*" ws body:b {Loop(:b)};
seqExec = "{" ws body:b1 ";" ws body:b2 seqExecs*:ss "}" ws {SeqExec(:b1, :b2, :ss)};
seqExecs = ";" ws body;
choiceExec = "{" ws body:b1 ws "U" ws body:b2 choiceExecs*:ss "}" ws {ChoiceExec(:b1, :b2, :ss)};
choiceExecs = "U" ws body;

assign = ws var:v ws ":=" ws expression:e ws {Assign(:v, :e)};
print = ws "print(" ws expression:e ws ")" ws {Print(:e)};

test   = ws "(" ws expression:e1 condition$s ws expression:e2 ")" ws "?" ws {Test(:e1, $s, :e2)};
while  = "while" ws "(" ws expression:e1 condition$s ws expression:e2 ")" ws body:b {While(:e1, $s, :e2, :b)};

expression = sub | sum | mul | int | rat | inv | div | var;
sum = "(" ws expression:l ws "+" ws expression:r ws ")" ws {ArSum(:l, :r)};
mul = "(" ws expression:l ws "*" ws expression:r ws ")" ws {ArMult(:l, :r)};
sub = "(" ws expression:l ws "-" ws expression:r ws ")" ws {ArSub(:l, :r)};
rat = "(" ws int$n ws "/" ws int$d ws ")" ws {ArRat(s2i($n), s2i($d))};
div = "(" ws expression:l ws "/" ws expression:r ws ")" ws {ArDiv(:l, :r)};
inv =  "-" expression:val ws {ArInv(:val)};

int = digit+ $s {ArInt(s2i($s))};
digit = '0'-'9';


var = letter+ $s {ArVar($s)};
letter = 'a'-'z' | 'A'-'Z';
condition   = "<" | ">" | "==" | "!=" | "<=" | ">=";

ws = (' ' | '\t' | '\n' | '\r')*;
