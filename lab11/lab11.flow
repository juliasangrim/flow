import lingo/pegcode/driver;
import string;
import ds/set;
import fs/filesystem;
import ds/array;
import maybe;
import ds/tuples;
import math/math;
import runtime;

Program(d : [Declaration], b : Body);
Body ::= SeqExec, ChoiceExec, Print, Assign, Loop, While, Test;
Print(e : ArExpr);
Assign(v : ArVar, e : ArExpr);
Loop(l : Body);
While(e1 : ArExpr, s : string, e2: ArExpr, b : Body);
Test(e1 : ArExpr, s : string, e2: ArExpr);
SeqExec(body : [Body]);
ChoiceExec(body : [Body]);
Declaration(v : ArVar, t : VarType);

VarType ::= TypeInt, TypeArray;
TypeInt();
TypeArray(t : VarType);

ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArInv, ArInt, ArVar, ArRat, Upd, Get;
Upd(a : ArExpr, i : ArExpr, value : ArExpr);
Get(a : ArExpr, i : ArExpr);
ArSub(lhs : ArExpr, rhs : ArExpr);
ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArRat(lhs :int, rhs : int);
ArInv(val : ArExpr);
ArInt(val : int);
ArVar(val : string);



s2ast(str : string) -> Program {
  e_gr = "#include D:/repo/flow9/lab11/grammar.lingo";
  parsic(
    compilePegGrammar(e_gr), 
    str,
      SemanticActions(
        mergeTree(defaultPegActions.t,
          pairs2tree([
            Pair("createSeqExec", \s -> SeqExec(concat([s[0]], s[1]))),
            Pair("createChoiceExec", \s -> ChoiceExec(concat([s[0]], s[1])))
          ])
        )
     )
  )
}

ar2str(expr : ArExpr) -> string {
	switch (expr) {
		ArInt(val) : i2s(val);
		ArSum(lhs, rhs) : concatStrings(["(", ar2str(lhs), " + ", ar2str(rhs), ")"]);
		ArMult(lhs, rhs) : concatStrings(["(", ar2str(lhs), " * ", ar2str(rhs), ")"]);
		ArSub(lhs, rhs) : concatStrings(["(", ar2str(lhs), " - ", ar2str(rhs), ")"]);
		ArInv(val) : concatStrings(["-", ar2str(val)]);
		ArDiv(lhs, rhs) : concatStrings(["(", ar2str(lhs), " / ", ar2str(rhs), ")"]);
		ArRat(lhs, rhs) : concatStrings([i2s(lhs), "/", i2s(rhs)]);
		ArVar(val): val;
    default: "";
	}
}


typeChecker(prog : Program) -> bool {
  declsCheck = declarationChecker(prog.d);
  if(declsCheck){
   bodyChecker(prog.d, prog.b);
  } else {
    false
  }
}

declarationChecker(d : [Declaration]) -> bool {
   res = fold(d, Some(makeSet()), \setVar, declaration -> {
    switch (setVar) {
      Some(set): {
        if (!containsSet(set, declaration.v)) {
          Some(insertSet(set, declaration.v));
        } else {
          println("Variable " + declaration.v.val + " has another type!");
          None()
        }
      }
      None(): {  
        None()
      }
    }
  });
  res ?? true : false;
}

//Body ::= SeqExec, ChoiceExec, Print, Assign, Loop, While, Test;
bodyChecker(d : [Declaration], body : Body) -> bool {
  switch(body) {
    Assign(v, e): {
      res = find(d, \decl -> v == decl.v);
      switch(res) {
        Some(decl): {
          type = getExprType(d, e);
          switch(type) {
            Some(exprtype): {
                if (decl.t == exprtype) {
                  true;
                } else {
                  println("Check assignment to variable " + decl.v.val);
                  false;
                }
            }
            None(): {
              println("Attempt to assign void value to variable " + );
              false;
            }
          }
        }
        None() : {
          println("No declaration found for + " + v.val);
          false;
        }
      }
    }
    Test(e1, s, e2): {
      if(getPartExprType(d, e1) != Some(TypeInt())) {
        println("Wrong left expression in Test: " + ar2str(e1));
        false
      } else if(getPartExprType(d, e2) != Some(TypeInt())) {
        println("Wrong right expression in Test: " + ar2str(e2));
        false
      } else {
        true
      }        
    }
    While(e1, s, e2, b): {
       if(getPartExprType(d, e1) != Some(TypeInt())) {
        println("Wrong left expression in While: " + ar2str(e1));
        false
      } else if(getPartExprType(d, e2) != Some(TypeInt())) {
        println("Wrong right expression in While: " + ar2str(e2));
        false
      } else {
        bodyChecker(d, b);
      }        
      
    }
    Print(e): {
      if(getExprType(d, e) != Some(TypeInt())) {
        println("Check argument in print.");
        false
      } else {
        true
      }
    }
    Loop(b) : {
       bodyChecker(d, b);
    }
    SeqExec(bodies) : {
       all(map(bodies, \b -> bodyChecker(d, b)))
    }
    ChoiceExec(bodies) : {
      all(map(bodies, \b -> bodyChecker(d, b)))
    } 
  }
}

getExprType(d : [Declaration], expr : ArExpr) -> Maybe<VarType> {
  switch (expr) {
    Get(a,i) : {
      //add check for index
      res = getExprType(d, a);
      switch(res) {
        Some(t) : {
          Some(t);
        }
        None() : None();
      }
    }
    Upd(a, i, value) : {
     res = getExprType(d, a);
      switch(res) {
        Some(t) : {
          Some(t);
        }
        None() : None();
      }
    }
    default: {
      getPartExprType(d, expr);
    }
  }
}

getPartExprType(d : [Declaration], expr : ArExpr) -> Maybe<VarType> {
  switch (expr) {
    ArVar(val): {
     res = find(d, \decl -> val == decl.v.val);
      switch(res) {
        Some(decl): Some(decl.t);
        None() : {
          println("No declaration found for + " + val);
          None();
        }
      }
   }
    default : {
      Some(TypeInt())
    }
  }
}

main() {
	s = getFileContent("D:/repo/flow9/lab11/test1.nm");
  println(s2ast(s));
  if (typeChecker(s2ast(s)) == true) {
    println("Program is fine.")
  } else {
    println("Change program.");
  }
}


