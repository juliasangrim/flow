import runtime;
import string;
import ds/array;
import ds/tree;

//inds(arr : [int], m : int) -> [Pair<int,int>] {
    //pairs : ref [Pair<int,int>] =  ref [];
   // iteri(arr, \i, el ->maybeApply(findi(subrange(arr, i, length(arr) - i)), \el2 -> el + el2 == m), \j ->refApplyPush(pairs, Pair(i,i+j)));
 //   ^pairs;
//}

//inds1(arr : [int], m : int) -> [Pair<int,int>] {
//   foldi(arr, [], \i, acc, 
//        a -> foldi(arr, acc, \j, bcc, 
//            b -> (if (a + b == m) {concat(bcc, [Pair(i,j)])} 
//            else {bcc})));
//}

//IndNum(
  //  ind : int; 
  //  num : int;
//);

//inds2(arr : [int], m : int) -> [Pair<int,int>] {
//    arr_ind = fold(arr, [], n->concat(acc, [IndNum(length(acc), n)]));
//    fold(arr_ind, [], \acc, a -> 
//        fold(arr_ind, acc, \bcc, b -> 
//            if (a.num + b.num == b) concat(bcc, [Pair<a.ind, b.ind>)
//            else bcc));
//}

inds3(arr : [int], m : int) -> [Pair<int,int>] {
    tree : Tree = foldi(arr, makeTree(), \i, t, value -> setTree(t, value, arrayPush(getTreeArrayValue(t, value), i)));
    foldi(arr, [], \i, pairs, a_i ->
        switch (lookupTree(tree, m - a_i)){
            Some(ind) : concat(pairs, map(ind, \x ->Pair(x,i)));
            None(): pairs;
        });
}

main() {
    m : int = 10;
    array : [int] = [1,2,3,4,5,6,7,8,9,10];
    println(inds3(array, m));
}