import lingo/pegcode/driver;
import string;
import ds/tree;
import fs/filesystem;
import ds/array;
import maybe;
import ds/tuples;
import math/math;

ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArInv, ArInt, ArVar, ArRat;
ArSub(lhs : ArExpr, rhs : ArExpr);
ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArRat(lhs :int, rhs : int);
ArInv(val : ArExpr);
ArInt(val : int);
ArVar(val : string);

s2ar(str : string) -> ArExpr {
	e_gr = "#include D:/repo/flow9/lab8/grammar.lingo";
	parsic(
			compilePegGrammar(e_gr), 
			str,
	SemanticActions(setTree(defaultPegActions.t,
     "createArInt", \s -> ArInt(s2i(s[0]))))
	 );
}

ar2str(expr : ArExpr) -> string {
	switch (expr) {
		ArInt(val) : i2s(val);
		ArSum(lhs, rhs) : concatStrings(["(", ar2str(lhs), " + ", ar2str(rhs), ")"]);
		ArMult(lhs, rhs) : concatStrings(["(", ar2str(lhs), " * ", ar2str(rhs), ")"]);
		ArSub(lhs, rhs) : concatStrings(["(", ar2str(lhs), " - ", ar2str(rhs), ")"]);
		ArInv(val) : concatStrings(["-", ar2str(val)]);
		ArDiv(lhs, rhs) : concatStrings(["(", ar2str(lhs), " / ", ar2str(rhs), ")"]);
		ArRat(lhs, rhs) : concatStrings([i2s(lhs), "/", i2s(rhs)]);
		ArVar(val): val;
	}
}


derivative(expr: ArExpr, var : string) -> ArExpr {
    switch (expr) {
		ArInt(val) : ArInt(0);
		ArSum(lhs, rhs) : {
            ArSum(derivative(lhs, var), derivative(rhs, var));
        }
		ArMult(lhs, rhs) : {
            ArSum(ArMult(derivative(lhs, var), rhs), ArMult(lhs, derivative(rhs, var)));
        }
		ArSub(lhs, rhs) : {
            ArSub(derivative(lhs, var), derivative(rhs, var))
        }
		ArInv(val) : {
            ArInv(derivative(val, var));
        }
		ArDiv(lhs, rhs) : {
            ArDiv(
                ArSub(
                ArMult(derivative(lhs, var), rhs), 
                ArMult(lhs, derivative(rhs, var))
                ),
             ArMult(rhs, rhs)
             );
        }
		ArRat(lhs, rhs) : {
            ArInt(0);
        }
		ArVar(val): {
            if (val == var) {
                ArInt(1);
            } else {
                ArInt(0);
            }
        }
	}
}

simplifyRat(l : int, r : int) -> ArExpr {
	if (r % l == 0) {
		ArInt(r/l);
	} else if (l == 0) {
		ArInt(0);
	}
	else {
		ArRat(l, r);
	}		
}

simplifySum(l : ArExpr, r : ArExpr) -> ArExpr {
	switch (l: ArExpr) {
		ArInt(val_l): {
			switch (r : ArExpr) {
				ArInt(val_r): {
					if (val_l != 0 && val_r != 0) {
						ArSum(l, r);
					} else if (val_l != 0) {
						l;
					} else {
						r;
					}
				}
				ArInv(val_r): {
					ArSub(l ,r);
				}
				default: {
					if (val_l != 0) {
						ArSum(l, r);
					} else {
						r;
					}
				}
			}
		}
		default: {
			switch (r : ArExpr) {
				ArInt(val): {
					if (val != 0) {
						ArSum(l, r);
					} else l;
				}
				ArInv(val_r): {
					ArSub(l ,r);
				}
				default: {
					ArSum(l, r);
				}
			}

		}
	}
}

simplifySub(l : ArExpr, r : ArExpr) {
	switch (l: ArExpr) {
		ArInt(val_l): {
			switch (r : ArExpr) {
				ArInt(val_r): {
					if (val_l != 0 && val_r != 0) {
						ArSub(l, r);
					} else if (val_l != 0) {
						l;
					} else {
						ArInt(0 - val_r);
					}
				}
				ArInv(val_r) : ArSum(l, r);
				default: {
					if (val_l != 0) {
						ArSub(l, r);
					} else {
						ArInv(r);
					}
				}
			}
		}
		default: {
			switch (r : ArExpr) {
				ArInt(val): {
					if (val != 0) {
						ArSub(l, r);
					} else l;
				}
				ArInv(val_r): ArSum(l, r);
				default: {
					ArSub(l, r);
				}
			}

		}
	}
}

simplifyMult(l : ArExpr, r : ArExpr) {
	switch (l: ArExpr) {
		ArInt(val_l): {
			switch (r : ArExpr) {
				ArInt(val_r): {
					if (val_l != 0 && val_r != 0) {
						if (val_l == 1) {
							r;
						} else if (val_r == 1) {
							l;
						} else if (val_l == -1) {
							ArInt(0 - val_r);
						} else if (val_r == -1) {
							ArInt(0 - val_l);
						} else {
							ArMult(l, r);
						}
					} else ArInt(0);
				}
				default: {
					if (val_l != 0) {
						if (val_l == 1) {
							r;
						} else if (val_l == -1) {
							ArInv(r);
						} else {
							ArMult(l, r);
						}
					} else {
						ArInt(0);
					}
				}
			}
		}
		default: {
			switch (r : ArExpr) {
				ArInt(val): {
					if (val != 0) {
						if (val == 1) {
							l;
						} else if (val == -1) {
							ArInv(l);
						} else {
							ArMult(l, r);
						}
					} else ArInt(0);
				}
				default: {
					ArMult(l, r);
				}
			}

		}
	}
}

simplifyDiv(l : ArExpr, r : ArExpr) {
	switch (l: ArExpr) {
		ArInt(val_l): {
			switch (r : ArExpr) {
				ArInt(val_r): {
					if (val_l != 0 && val_r != 0) {
						if (val_r == 1) {
							l;
						} else if (val_r == -1) {
							ArInt(0 - val_l);
						} else {
							ArDiv(l, r);
						}
					} else {
						ArInt(0);
					}
				}
				default: {
					if (val_l != 0) {
						ArDiv(l, r);
					} else {
						ArInt(0);
					}
				}
			}
		}
		default: {
			switch (r : ArExpr) {
				ArInt(val): {
					if (val != 0) {
						if (val == 1) {
							l;
						} else if (val == -1) {
							ArInv(l);
						} else {
							ArDiv(l, r);
						}
					} else ArInt(0);
				}
				default: {
					ArDiv(l, r);
				}
			}

		}
	}
}

simplifyInv(val : ArExpr) {
	switch (val : ArExpr) {
		ArInt(val_l): {
			if (val_l == 0) {
				ArInt(0);
			} else {
				ArInt(0 - val_l);
			}
		}
		default: {
			ArInv(val);
		}
	}
}



simplifyDerivative(expr : ArExpr) -> ArExpr {
    switch (expr) {
        ArInt(val) : {
            ArInt(val);
        }
        ArRat(lhs, rhs): {
			simplifyRat(lhs, rhs);
		}
		ArVar(val) : {
			ArVar(val)
		}
		ArSum(lhs, rhs): {
			lhs_simple = simplifyDerivative(lhs);
			rhs_simple = simplifyDerivative(rhs);
			simplifySum(lhs_simple, rhs_simple);
		}
		ArSub(lhs, rhs): {
			lhs_simple = simplifyDerivative(lhs);
			rhs_simple = simplifyDerivative(rhs);
			simplifySub(lhs_simple, rhs_simple);
		}
		ArMult(lhs, rhs): {
			lhs_simple = simplifyDerivative(lhs);
			rhs_simple = simplifyDerivative(rhs);
			simplifyMult(lhs_simple, rhs_simple);
		}
		ArDiv(lhs, rhs): {
			lhs_simple = simplifyDerivative(lhs);
			rhs_simple = simplifyDerivative(rhs);
			simplifyDiv(lhs_simple, rhs_simple);
		}
		ArInv(val) : {
			val_simple = simplifyDerivative(val);
			simplifyInv(val);
		}
    }
}

printRes(res : Pair<int,int>) -> void {
	if (firstOfPair(res) % secondOfPair(res) == 0) {
		println(firstOfPair(res) / secondOfPair(res));
	} else if (secondOfPair(res) < 0 && firstOfPair(res) > 0) {
		println(concatStrings(["-", i2s(firstOfPair(res)), "/", i2s(iabs(secondOfPair(res)))]));
	} else if (firstOfPair(res) < 0 && secondOfPair(res) < 0) {
		println(concatStrings([i2s(iabs(firstOfPair(res))), "/", i2s(iabs(secondOfPair(res)))]));
	} else {
		println(concatStrings([i2s(firstOfPair(res)), "/", i2s(secondOfPair(res))]));
	}
}

main() {
	s = getFileContent("test.txt");
    tree = s2ar(s);
	var = "x";
	println("Expression: ");
	println(s);
	println("Expression to tree: ");
    println(tree);
	println("Derivative: ");
	res = derivative(tree, var);
    println(ar2str(res));
	println(ar2str(simplifyDerivative(res)));
}