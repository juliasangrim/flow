import lingo/pegcode/driver;
import string;
import ds/tree;
import fs/filesystem;
import ds/array;
import maybe;
import ds/tuples;
import math/math;

ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArInv, ArInt, ArVar, ArRat;
ArSub(lhs : ArExpr, rhs : ArExpr);
ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArRat(lhs :int, rhs : int);
ArInv(val : ArExpr);
ArInt(val : int);
ArVar(val : string);

s2ar(str : string) -> ArExpr {
	e_gr = "#include D:/repo/flow9/lab7/grammar.lingo";
	parsic(
			compilePegGrammar(e_gr), 
			str,
	SemanticActions(setTree(defaultPegActions.t,
     "createArInt", \s -> ArInt(s2i(s[0]))))
	 );
}

ar2str(expr : ArExpr) -> string {
	switch (expr) {
		ArInt(val) : i2s(val);
		ArSum(lhs, rhs) : concatStrings(["(", ar2str(lhs), "+", ar2str(rhs), ")"]);
		ArMult(lhs, rhs) : concatStrings(["(", ar2str(lhs), "*", ar2str(rhs), ")"]);
		ArSub(lhs, rhs) : concatStrings(["(", ar2str(lhs), "-", ar2str(rhs), ")"]);
		ArInv(val) : concatStrings(["-", ar2str(val)]);
		ArDiv(lhs, rhs) : concatStrings(["(", ar2str(lhs), "/", ar2str(rhs), ")"]);
		ArRat(lhs, rhs) : concatStrings([i2s(lhs), "/", i2s(rhs)]);
		ArVar(val): val;
	}
}

doSimple(rat : Pair<int,int>) -> Pair<int,int> {
	if (firstOfPair(rat) % secondOfPair(rat) == 0) {
		Pair(firstOfPair(rat) / secondOfPair(rat) , 1);
	} else {
		rat;
	}
}

doNormalRat(rat : Pair<int,int>) -> Pair<int,int> {
	if (firstOfPair(rat) < 0 && secondOfPair(rat) < 0) {
		rat1 = Pair(iabs(firstOfPair(rat)), iabs(secondOfPair(rat)));
		doSimple(rat1);
	} else if (firstOfPair(rat) > 0 && secondOfPair(rat) < 0) {
		rat1 = Pair(0 - firstOfPair(rat), iabs(secondOfPair(rat)));
		doSimple(rat1);
	} else {
		doSimple(rat);
	}
}

calc(expr : ArExpr, tree : Tree<string, ArExpr>) -> Maybe<Pair<int,int>> {
	switch (expr) {
		ArInt(val) : Some(Pair(val, 1));
		ArSum(lhs, rhs) : {
			lhs1 = calc(lhs, tree);
			rhs1 = calc(rhs, tree);
			if (lhs1 == None() || rhs1 == None()) {
				None();
			} else {
				tmpLhs = doNormalRat(either(lhs1, Pair(0,0)));
				tmpRhs = doNormalRat(either(rhs1, Pair(0,0)));
				if (secondOfPair(tmpLhs) ==  secondOfPair(tmpRhs)) {
					Some(Pair(firstOfPair(tmpLhs) + firstOfPair(tmpRhs), secondOfPair(tmpRhs)));
				} else {
					Some(Pair(firstOfPair(tmpLhs) * secondOfPair(tmpRhs) + firstOfPair(tmpRhs) * secondOfPair(tmpLhs),
					 secondOfPair(tmpRhs) * secondOfPair(tmpLhs)));
				}
			}
		}
		ArMult(lhs, rhs) : {
			lhs1 = calc(lhs, tree);
			rhs1 = calc(rhs, tree);
			if (lhs1 == None() || rhs1 == None()) {
				None();
			} else {
				tmpLhs = doNormalRat(either(lhs1, Pair(0,0)));
				tmpRhs = doNormalRat(either(rhs1, Pair(0,0)));
				Some(Pair(firstOfPair(tmpLhs) * firstOfPair(tmpRhs), secondOfPair(tmpLhs) *  secondOfPair(tmpRhs)));
			};
		}
		ArSub(lhs, rhs) : {
			lhs1 = calc(lhs, tree);
			rhs1 = calc(rhs, tree);
			if (lhs1 == None() || rhs1 == None()) {
				None();
			} else {
				tmpLhs = doNormalRat(either(lhs1, Pair(0,0)));
				tmpRhs = doNormalRat(either(rhs1, Pair(0,0)));
				if ( secondOfPair(tmpLhs) ==  secondOfPair(tmpRhs)) {
					Some(Pair(firstOfPair(tmpLhs) - firstOfPair(tmpRhs), secondOfPair(tmpRhs)));
				} else {
					Some(Pair(firstOfPair(tmpLhs) * secondOfPair(tmpRhs) - firstOfPair(tmpRhs) * secondOfPair(tmpLhs),
					 secondOfPair(tmpRhs) * secondOfPair(tmpLhs)));
				}
			}
		}
		ArInv(val) : {
			val1 = calc(val, tree);
			if (val1 == None()) {
				None();
			} else {
				tmpVal = doNormalRat(either(val1, Pair(0,0)));
				Some(Pair(0 - firstOfPair(tmpVal), secondOfPair(tmpVal)));
			}
		}
		ArRat(lhs, rhs) : { 
			if (rhs != 0) {
				Some(Pair(lhs, rhs));
			}  else {
				None();
			}
		}
		ArDiv(lhs, rhs) : {
			lhs1 = calc(lhs, tree);
			rhs1 = calc(rhs, tree);
			tmpLhs = doNormalRat(either(lhs1, Pair(0,0)));
			tmpRhs = doNormalRat(either(rhs1, Pair(0,0)));
			if (lhs1 == None() || rhs1 == None() || secondOfPair(tmpLhs) == 0 ||  firstOfPair(tmpRhs) == 0 ) {
				None();
			} else {
				Some(Pair(firstOfPair(tmpLhs) * secondOfPair(tmpRhs), secondOfPair(tmpLhs) *  firstOfPair(tmpRhs)));
			}
		}
		ArVar(val): {
			val_tree = lookupTree(tree, val);
			if (val_tree == None()) {
				None();
			} else {
				val_tmp = either(val_tree, ArInt(0));
				switch (val_tmp) {
					ArInt(val1): {
						Some(Pair(val1, 1));
					}
					ArRat(l,r) : {
						Some(Pair(l, r));
					}
					default : None();
				}
			}
		}
	}
}

printRes(res : Pair<int,int>) -> void {
	if (firstOfPair(res) % secondOfPair(res) == 0) {
		println(firstOfPair(res) / secondOfPair(res));
	} else {
		l = firstOfPair(res) / gcd(secondOfPair(res), firstOfPair(res));
		r = secondOfPair(res) / gcd(secondOfPair(res), firstOfPair(res));
		if (r < 0 && l > 0) {
			println(concatStrings([i2s(0 - l), "/", i2s(iabs(r))]));
		} else if (r < 0 && l < 0) {
			println(concatStrings([i2s(iabs(l)), "/", i2s(iabs(r))]));
		} else println(concatStrings([i2s(l), "/", i2s(r)]));
	} 
}

main() {
	s = getFileContent("test.txt");
    tree = s2ar(s);
	var = setTree(makeTree(), "x", ArRat(2,3));
	println("Expression: ");
	println(s);
	println("Expression to tree: ");
    println(tree);
	println("Resolve inf form: ");
	res = calc(tree, var);
	if (res == None()) {
		println("Devision by 0 or no such variable");
	} 
	else {
		printRes(either(res, Pair(0,0)));
	}
}