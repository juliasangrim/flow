import lingo/pegcode/driver;
import string;
import ds/tree;
import fs/filesystem;

ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArInv, ArInt, ArVar;
ArSub(lhs : ArExpr, rhs : ArExpr);
ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArInv(val : ArExpr);
ArInt(val : int);
ArVar(val : string);

s2ar(str : string) -> ArExpr {
	e_gr = "#include D:/repo/flow9/lab7/grammar.lingo";
	parsic(
			compilePegGrammar(e_gr), 
			str,
	SemanticActions(setTree(defaultPegActions.t,
     "createArInt", \s -> ArInt(s2i(s[0]))))
	 );
}

ar2str(expr : ArExpr) -> string {
	switch (expr) {
		ArInt(val) : i2s(val);
		ArSum(lhs, rhs) : concatStrings(["(", ar2str(lhs), "+", ar2str(rhs), ")"]);
		ArMult(lhs, rhs) : concatStrings(["(", ar2str(lhs), "*", ar2str(rhs), ")"]);
		ArSub(lhs, rhs) : concatStrings(["(", ar2str(lhs), "-", ar2str(rhs), ")"]);
		ArInv(val) : concatStrings(["-", ar2str(val)]);
		ArDiv(lhs, rhs) : concatStrings(["(", ar2str(lhs), "/", ar2str(rhs), ")"]);
	}
}

calc(expr : ArExpr) -> double {
	switch (expr) {
		ArInt(val) : i2d(val);
		ArSum(lhs, rhs) : calc(lhs) + calc(rhs);
		ArMult(lhs, rhs) : calc(lhs) * calc(rhs);
		ArSub(lhs, rhs) : calc(lhs) - calc(rhs);
		ArInv(val) : 0.0 - calc(val);
		ArDiv(lhs, rhs) : calc(lhs) / calc(rhs);
	}
}


inf2RPN(expr : ArExpr) -> List<string> {
    switch (expr) {
        ArInt(val) : makeList1(i2s(val));
        ArSum(lhs, rhs) : concatList(concatList(inf2RPN(lhs),  inf2RPN(rhs)), makeList1("+"));
        ArMult(lhs, rhs) : concatList(concatList(inf2RPN(lhs),  inf2RPN(rhs)), makeList1("*"));  
		ArSub(lhs, rhs) : concatList(concatList(inf2RPN(lhs),  inf2RPN(rhs)), makeList1("-"));
		ArInv(val) : concatList(inf2RPN(val), makeList1("n")); 
		ArDiv(lhs, rhs) : concatList(concatList(inf2RPN(lhs),  inf2RPN(rhs)), makeList1("/"));
    }

}

RPN2ar(expr : List<string>) -> ArExpr {
	listAt(
	foldList(expr, makeList(), \stack, i -> {
		if (i == "+") {
				Cons(
						ArSum(listAt(stack, 1, ArInt(0)), 
						listAt(stack, 0, ArInt(0))), 
				tailList(tailList(stack)));
		} else if (i == "*") {
				Cons(
						ArMult(listAt(stack, 1, ArInt(0)), 
						listAt(stack, 0, ArInt(0))), 
					tailList(tailList(stack)));
		} else if (i == "-") {
			Cons(
					ArSub(listAt(stack, 1, ArInt(0)), 
						listAt(stack, 0, ArInt(0))), 
					tailList(tailList(stack)));
		} else if (i == "n") {
			Cons(
				ArInv(listAt(stack, 0, ArInt(0))),
				tailList(stack));
		}  else if (i == "/") {
			Cons(
					ArDiv(listAt(stack, 1, ArInt(0)), 
						listAt(stack, 0, ArInt(0))), 
					tailList(tailList(stack)));
		} else {
			Cons(ArInt(s2i(i)), stack);
		}
		}), 0, ArInt(0));
}

calcRPN(expr : List<string>) -> double {
	listAt(
	foldList(expr, makeList(), \stack, i -> {
		if (i == "+") {
				Cons(
						listAt(stack, 1, 0.0) + listAt(stack, 0, 0.0), 
				tailList(tailList(stack)));
		} else if (i == "*") {
				Cons(
						listAt(stack, 1, 0.0) * listAt(stack, 0, 0.0), 
					tailList(tailList(stack)));
		} else if (i == "-") {
				Cons(
						listAt(stack, 1, 0.0) - listAt(stack, 0, 0.0), 
					tailList(tailList(stack)));
		} else if (i == "/") {
				Cons(
						listAt(stack, 1, 0.0) / listAt(stack, 0, 0.0), 
					tailList(tailList(stack)));
		} else if (i == "n") {
			Cons(
				0.0 - listAt(stack, 0, 0.0),
				tailList(stack));
		} else {
			Cons(s2d(i), stack);
		}
		}), 0, 0.0);
	
}

printRPN(rpn : List<string>) -> void {
	foldList(rpn, makeList(), \stack, i -> {
		if (i == "n") {
			print("-");
		} else { 
			print(i);
		}
		print(" ");
		tailList(stack);
	});
	print("\n");
}


main() {
	s = getFileContent("test.txt");
    tree = s2ar(s);
	println("Expression: ");
	println(s);
	println("Expression to tree: ");
    println(tree);
	println("Resolve inf form: ");
	println(calc(tree));
    println("Inf to RPN: ");
    rpn = inf2RPN(tree);
    printRPN(rpn);
	println("RPN to inf :");
    println(ar2str(RPN2ar(rpn)));
	println("Resolve rpn form: ");
	println(calcRPN(rpn));
}