import lingo/pegcode/driver;
import string;
import ds/tree;
import fs/filesystem;
import ds/array;
import maybe;
import ds/tuples;
import math/math;

ArExpr ::= ArSum, ArMult, ArSub, ArDiv, ArInv, ArInt, ArVar, ArRat;
ArSub(lhs : ArExpr, rhs : ArExpr);
ArSum(lhs : ArExpr, rhs : ArExpr);
ArMult(lhs : ArExpr, rhs : ArExpr);
ArDiv(lhs : ArExpr, rhs : ArExpr);
ArRat(lhs :int, rhs : int);
ArInv(val : ArExpr);
ArInt(val : int);
ArVar(val : string);

Monom(monom : Tree<string, int>);
Polinom(monoms : Tree<Monom, int>);
RatExpr(top : Polinom, bottom : Polinom);

s2ar(str : string) -> ArExpr {
	e_gr = "#include D:/repo/flow9/lab10/grammar.lingo";
	parsic(
			compilePegGrammar(e_gr), 
			str,
	SemanticActions(setTree(defaultPegActions.t,
     "createArInt", \s -> ArInt(s2i(s[0]))))
	 );
}

ar2str(expr : ArExpr) -> string {
	switch (expr) {
		ArInt(val) : i2s(val);
		ArSum(lhs, rhs) : concatStrings(["(", ar2str(lhs), " + ", ar2str(rhs), ")"]);
		ArMult(lhs, rhs) : concatStrings(["(", ar2str(lhs), " * ", ar2str(rhs), ")"]);
		ArSub(lhs, rhs) : concatStrings(["(", ar2str(lhs), " - ", ar2str(rhs), ")"]);
		ArInv(val) : concatStrings(["-", ar2str(val)]);
		ArDiv(lhs, rhs) : concatStrings(["(", ar2str(lhs), " / ", ar2str(rhs), ")"]);
		ArRat(lhs, rhs) : concatStrings([i2s(lhs), "/", i2s(rhs)]);
		ArVar(val): val;
	}
}


ar2RatExpr(expr : ArExpr) -> RatExpr {
    switch (expr) {
        ArInt(val): {
            RatExpr(
            Polinom(makeTree1(Monom(makeTree()), val)), 
            Polinom(makeTree1(Monom(makeTree()), 1))
            );  
        }
        ArVar(val): {
            RatExpr(
            Polinom(makeTree1(Monom(makeTree1(val, 1)), 1)), 
            Polinom(makeTree1(Monom(makeTree()), 1))
            );
        }
        ArRat(lhs, rhs): {
            RatExpr(
            Polinom(makeTree1(Monom(makeTree()), lhs)), 
            Polinom(makeTree1(Monom(makeTree()), rhs))
            );
        }
        ArSum(lhs, rhs): {
			sumRat(ar2RatExpr(lhs), ar2RatExpr(rhs));
        }
        ArSub(lhs, rhs): {
			sumRat(ar2RatExpr(lhs), invRat(ar2RatExpr(rhs)));
        }
        ArMult(lhs, rhs): {
			multRat(ar2RatExpr(lhs), ar2RatExpr(rhs));
        }
        ArDiv(lhs, rhs): {
			divRat(ar2RatExpr(lhs), ar2RatExpr(rhs));
        }
        ArInv(val): {
			invRat(ar2RatExpr(val));
        }
    }
}

sumRat(expr_lhs : RatExpr, expr_rhs : RatExpr) -> RatExpr {
	RatExpr(
		sumPolinom(
			multPolinom(expr_lhs.top, expr_rhs.bottom),
			multPolinom(expr_rhs.top, expr_lhs.bottom)
		), 
		multPolinom(expr_lhs.bottom, expr_rhs.bottom)
	);
}

multRat(expr_lhs : RatExpr, expr_rhs : RatExpr) -> RatExpr {
	RatExpr(
		multPolinom(expr_lhs.top, expr_rhs.top), 
		multPolinom(expr_lhs.bottom, expr_rhs.bottom)
	);
}
divRat(expr_lhs : RatExpr, expr_rhs : RatExpr) -> RatExpr {
	RatExpr(
		multPolinom(expr_lhs.top, expr_rhs.bottom), 
		multPolinom(expr_lhs.bottom, expr_rhs.top)
	);
}

invRat(expr : RatExpr) -> RatExpr {
	 RatExpr(
        Polinom(mapTree(expr.top.monoms, \monom -> -monom)),
        expr.bottom
    );
}

sumPolinom(lhs : Polinom, rhs : Polinom) -> Polinom {
	Polinom(mergeTreeCustom(lhs.monoms, rhs.monoms, \k, coef_lhs, coef_rhs -> coef_lhs + coef_rhs));
}


multPolinom(lhs : Polinom, rhs : Polinom) -> Polinom {
   Polinom(foldTree(lhs.monoms, makeTree(), \monom_lhs, coef_lhs, lhs_acum -> {
	   foldTree(rhs.monoms, lhs_acum, \monom_rhs, coef_rhs, rhs_acum -> {
		   multMonom = Monom(mergeTreeCustom(monom_lhs.monom, monom_rhs.monom, \k, pow_lhs, pow_rhs -> pow_lhs + pow_rhs));
		   result = lookupTree(rhs_acum, multMonom);
		   result ?? setTree(rhs_acum, multMonom, result + coef_lhs * coef_rhs) : setTree(rhs_acum, multMonom, coef_lhs * coef_rhs);
	   });
	})
   )
}


ratExpr2s(expr : RatExpr) -> string {
	println(expr);
	lhs = polinom2s(expr.top);
	rhs = polinom2s(expr.bottom);

	if (rhs == "") {
		"Division by zero!"
	} else if (lhs == "") {
		"0"
	} else if (rhs == "1") {
		lhs;
	} else if (rhs == "-1") {
		expr_inv = invRat(expr);
		polinom2s(expr_inv.top);
	} else if (rhs == lhs) {
		"1"
	} else concatStrings(["(", lhs, ")", " / ", "(", rhs, ")"]);
}

polinom2s(expr : Polinom) -> string {
	foldTree(expr.monoms, "", \monoms, coef, result -> {
		if (result == "") {
			monom2s(monoms, coef);	
		}
		else {
			mon = monom2s(monoms, coef);
			if (mon != "") {
				if (coef >= 0) {
        			concatStrings([ result, " + ", monom2s(monoms, coef)]);
				} else {
					concatStrings([ result," - ", monom2s(monoms, iabs(coef))]);
				}
			} else {
				concatStrings([ result, monom2s(monoms, coef)]);
			}
		} 
	});
}

monom2s(expr : Monom, coef : int) -> string {
	if (coef == 0) { 
		"";
	} else if (coef == 1) {
		if (!isEmptyTree(expr.monom)) {
			foldTree(expr.monom, "", \monom, power, result -> {
           		if(power == 1) {
            		concatStrings([result, monom]);
        		} else {
            		concatStrings([result, monom, "^", "(", i2s(power), ")"]);
					}	
        	});
		} else {
			if (coef == 1) {
				"1"
			} else {
				"-1"
			}
		}
	} else {
        foldTree(expr.monom, i2s(coef), \monom, power, result -> {
            if(power == 1) {
                concatStrings([result, monom]);
            } else {
                concatStrings([result, monom, "^", "(", i2s(power), ")"]);
            }
        });
    }
}

main() {
	s = getFileContent("lab10.txt");
    tree = s2ar(s);
	println("Expression: ");
	println(s);
	println("Expression to tree: ");
    println(tree);
	println(ratExpr2s(ar2RatExpr(tree)));

}